Semester project: Compiler Construction

This project is designed to help you understand the different components of a compiler by using a simple grammar. You will be selecting tools for lexing and parsing, and then manually implementing an Abstract Syntax Tree (AST) for expressions, a symbol table, and generating three-address code. Your work should be done in Java or C++, or Python


You can work in a group of up to 3 people.


Part 1: Lexer Generator Selection

Choose one lexer generator tool that works with Java, C/C++ or Python. You will use this tool to tokenize the input based on the defined lexical structures below. 

Some options for Java include:
- **JFlex**: A lexer/scanner generator for Java.
- **ANTLR**: Can also be used to generate lexers in addition to parsers.

Options for C++ include:
- **Flex**: A fast lexical analyser generator compatible with Bison parsers.
- **RE/flex**: The regex-centric, fast lexer for C++ and C.

Options for Python include:
- **ANTLR**: A fast lexical analyser generator compatible with Bison parsers.
- **PLY**: an implementation of lex and yacc parsing tools for Python.


=============Tokens ===========

1) keywords

     double int long char bool  fun 

     if then else true false orelse andalso

2) operators and other 

assignment operator (right associative) =  +=  -=  *=  /=     
arithmetic binary operator +   -   *    / (* double division *)    // (int division)   
comparison  >  <  ==    !=
unary operator - !
 

3) integer literal

DecimalIntegerLiteral defined here 
https://docs.oracle.com/javase/specs/jls/se17/html/jls-3.html#jls-DecimalIntegerLiteral 


Examples of valid DecimalIntegerLiteral:
0  
1
52
5_2
5_2L
5_2l
5__2
5_21
Examples of invalid DecimalIntegerLiteral: 
00  (* leading zero *)
01 (* leading zero *)
0_52 (* leading zero *)
_52 (* starts with underscore *)
52_ (* end with underscore *)

4) double literal

     one or more digits.one or more digits without leading zero

or 
    .one or more digits

  valid double:  0.2, 1.2, .2, 1.0, 0.0

  invalid double: 00.2, 1. 


5) char literal: single char inside " "


6) identifier
  a letter followed by sequence of digits or letter
  cannot be a keyword in 1)

 letter: a-z, or A-Z

 digits: 0-9

7) separators, one of 
;  ,  (  )  { } 

8)  use "white space separates tokens" rule 
    Separators and operators  also separate  other tokens 
   "longest token rule":   x+=2;   has 4 tokens x   +=  2 ;

int2x+3;   (* int2x + 3 ; *)

2int,    (* illegal token *)

9) comment is not a token
(* this is a comment *)

Examples of possible input  :
(* comments *)    s
fun sq (int x)=x*x;  (* fun sq  ( int x ) = x * x ; 
if i > j then 1 else 2 ; 

bool x = false;   (*bool x = false ; 

int x=-2; (* int x = -2 ; *)

int x=2l; (* int x = 21 ; *)

long x12=2L; (* long x12 = 2L  ; *)
 
{
double i,j; (* double i ,  j ; *)

i+=j; (* i += j ;*)
}
char c = "a";
 
i-j=3; (* i - j = 3 ; *)


fun isWeekend x = (x = Sa orelse x = Su);        


The lexer should read  a file which may contain many lines, output the tokens (including the invalid ones)
 on screen and file. 

Submit
1. A report documenting your choice of lexer generator including a justification.

2. The input (lexer grammar, that is, the specification of the tokens) and output (the lexer) of your lexer generator.

3. A set of test cases and their output that demonstrate the functionality of the lexer. 

4. a video demonstration showing 

           your tool, input, test cases and output for each test cases 

           every member should present, also the specific contribution of each member 

5) (optional) The transition functions used by the lexer,  you can use transition diagram or transition table

One submission per group, put the names of all group member in the comments

